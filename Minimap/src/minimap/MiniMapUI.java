package minimap;

import java.awt.Toolkit;
import javax.swing.SwingUtilities;
import tatukgis.jdk.TGIS_Color;
import tatukgis.jdk.TGIS_Extent;
import tatukgis.jdk.TGIS_LayerVector;
import tatukgis.jdk.TGIS_Lock;
import tatukgis.jdk.TGIS_Point;
import tatukgis.jdk.TGIS_Shape;
import tatukgis.jdk.TGIS_ShapeType;
import tatukgis.jdk.TGIS_Utils;
import tatukgis.jdk.TGIS_ViewerMode;
import tatukgis.rtl.TNotifyEvent;
import tatukgis.rtl.TPoint;

public class MiniMapUI extends javax.swing.JFrame {

    public MiniMapUI() {
        initComponents();
        initOwn();
    }

    private void initOwn(){
        TGIS_LayerVector llm;
        TGIS_LayerVector lv;
        TGIS_LayerVector lw;
        
        GIS.Lock();
        GISm.Lock();
        GIS.Open(TGIS_Utils.GisSamplesDataDirDownload() + "/World/Countries/Poland/DCW/poland.ttkproject");

        GIS.SetCSByEPSG(2180);

        llm = (TGIS_LayerVector)
                  (TGIS_Utils.GisCreateLayer(
                      "country",
                      TGIS_Utils.GisSamplesDataDirDownload() + "/World/Countries/Poland/DCW/country.shp"
                      )
                   );
        llm.setUseConfig(false);
        llm.getParams().getArea().setColor(TGIS_Color.getWhite());
        llm.getParams().getArea().setOutlineColor(TGIS_Color.getSilver());
        GISm.Add(llm); //Add layer to minimap

        lv = new TGIS_LayerVector(); //Creating minimap transparent rectangle
        lv.setTransparency(30);
        lv.getParams().getArea().setColor(TGIS_Color.getRed());
        lv.getParams().getArea().setOutlineWidth(-2);
        lv.setName(MINIMAP_R_NAME);
        lv.setCS(llm.getCS());
        GISm.Add(lv);
        minishp = ((TGIS_LayerVector)(GISm.Get(MINIMAP_R_NAME))).CreateShape(TGIS_ShapeType.Polygon);
        lw = new TGIS_LayerVector();
        lw.getParams().getLine().setColor(TGIS_Color.getMaroon());
        lw.getParams().getLine().setWidth(-2);
        lw.setName(MINIMAP_O_NAME);
        lw.setCS(llm.getCS());
        GISm.Add(lw);
        minishpo = ((TGIS_LayerVector)(GISm.Get(MINIMAP_O_NAME))).CreateShape(TGIS_ShapeType.Arc);

        GISm.FullExtent();
        GIS.FullExtent();

        GISm.setRestrictedExtent(GISm.getExtent());
        minishp.getLayer().setExtent(GISm.getExtent());
        fminiMove = false;  
        

        
        GIS.setVisibleExtentChangeEvent(new TNotifyEvent() {
            @Override
            public void Invoke(Object o) {
                doVisibleExtentChange();
            }
        });
        GIS.Unlock();
        GISm.Unlock();
        minimapRefresh();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCoords = new javax.swing.JLabel();
        lblP1 = new javax.swing.JLabel();
        lblP2 = new javax.swing.JLabel();
        lblP3 = new javax.swing.JLabel();
        lblP4 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnFullExtent = new javax.swing.JButton();
        btnZoomIn = new javax.swing.JButton();
        btnZoomOut = new javax.swing.JButton();
        btnZoom = new javax.swing.JButton();
        btnDrag = new javax.swing.JButton();
        GISm = new tatukgis.jdk.TGIS_ViewerWnd();
        GIS = new tatukgis.jdk.TGIS_ViewerWnd();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniMap - TatukGIS DK11 sample");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/icon.png")));
        setSize(new java.awt.Dimension(800, 600));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCoords, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCoords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jToolBar1.setRollover(true);

        btnFullExtent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FullExtent.png"))); // NOI18N
        btnFullExtent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFullExtentActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFullExtent);

        btnZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomIn.png"))); // NOI18N
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomIn);

        btnZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ZoomOut.png"))); // NOI18N
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomOut);

        btnZoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Zoom.png"))); // NOI18N
        btnZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoom);

        btnDrag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Drag.png"))); // NOI18N
        btnDrag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDragActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDrag);

        GISm.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                GISmMouseDragged(evt);
            }
        });
        GISm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GISmMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GISmMouseReleased(evt);
            }
        });

        GIS.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                GISMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblP1)
                            .addComponent(lblP2)
                            .addComponent(lblP3)
                            .addComponent(lblP4)
                            .addComponent(GISm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, 200))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GIS, javax.swing.GroupLayout.PREFERRED_SIZE, 569, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lblP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GISm, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GIS, javax.swing.GroupLayout.PREFERRED_SIZE, 356, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFullExtentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFullExtentActionPerformed
        if(GIS.getIsEmpty()) return;
        GIS.FullExtent();
        GISm.FullExtent();
        minimapRefresh();
    }//GEN-LAST:event_btnFullExtentActionPerformed

    private void btnZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomActionPerformed
        if(GIS.getIsEmpty()) return;
        GIS.setMode(TGIS_ViewerMode.Zoom);
    }//GEN-LAST:event_btnZoomActionPerformed

    private void btnDragActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDragActionPerformed
        if(GIS.getIsEmpty()) return;
        GIS.setMode(TGIS_ViewerMode.Drag);
    }//GEN-LAST:event_btnDragActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        if(GIS.getIsEmpty()) return;
        GIS.setZoom(GIS.getZoom() * 2);
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        if(GIS.getIsEmpty()) return;
        GIS.setZoom(GIS.getZoom() / 2);
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void GISmMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GISmMousePressed
            if (GIS.getIsEmpty()) return;
            if (SwingUtilities.isRightMouseButton(evt)) return;
            fminiMove = true;
    }//GEN-LAST:event_GISmMousePressed

    private void GISmMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GISmMouseReleased
            TGIS_Point ptg;
            TGIS_Point p1, p2, p3, p4;

            if (GIS.getIsEmpty()) return;

            if (!fminiMove) return;

            ptg = GISm.ScreenToMap(new TPoint(evt.getX(), evt.getY()));

            minishp.SetPosition(ptg, null, 1);

            GISm.InvalidateWholeMap();
            fminiMove = false;

            p1 = minishp.GetPoint(0, 0);
            p2 = minishp.GetPoint(0, 1);
            p3 = minishp.GetPoint(0, 2);
            p4 = new TGIS_Point();
            p4.X = p1.X + (p2.X - p1.X) / 2;
            p4.Y = p1.Y + (p3.Y - p2.Y) / 2;
            GIS.setCenter(GISm.getCS().ToCS(GIS.getCS(), p4));
            minimapRefresh();
    }//GEN-LAST:event_GISmMouseReleased

    private void GISmMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GISmMouseDragged
            TGIS_Point ptg;

            if (GIS.getIsEmpty()) return;

            if (!fminiMove) return;
            ptg = GISm.ScreenToMap(new TPoint(evt.getX(), evt.getY()));
            minishp.SetPosition(ptg, null, 1);
            GISm.InvalidateWholeMap();
    }//GEN-LAST:event_GISmMouseDragged

    private void GISMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GISMouseMoved
            TGIS_Point ptg;

            if (GIS.getIsEmpty()) return;

            ptg = GIS.ScreenToMap(new TPoint(evt.getX(), evt.getY()));
            lblCoords.setText("x: " + round(ptg.X, 2) + "  y: " + round(ptg.Y, 2));
    }//GEN-LAST:event_GISMouseMoved

    private void doVisibleExtentChange(){
    
        TGIS_Extent ex;

        ex = GIS.getVisibleExtent();
        lP1 = new TGIS_Point(ex.XMin, ex.YMin);
        lP2 = new TGIS_Point(ex.XMax, ex.YMin);
        lP3 = new TGIS_Point(ex.XMax, ex.YMax);
        lP4 = new TGIS_Point(ex.XMin, ex.YMax);
        lblP1.setText("P1  x: " + round(lP1.X, 2) + "  y: " + round(lP1.Y, 2));
        lblP2.setText("P2  x: " + round(lP2.X, 2) + "  y: " + round(lP2.Y, 2));
        lblP3.setText("P3  x: " + round(lP3.X, 2) + "  y: " + round(lP3.Y, 2));
        lblP4.setText("P4  x: " + round(lP4.X, 2) + "  y: " + round(lP4.Y, 2));

        minimapRefresh();
    }

    private void minimapRefresh(){
        TGIS_Point ptg1;
        TGIS_Point ptg2;
        TGIS_Point ptg3;
        TGIS_Point ptg4;
        TGIS_Extent ex;

        if (GIS.getIsEmpty()) return;

        ex = GISm.getCS().ExtentFromCS(GIS.getCS(), GIS.getVisibleExtent());
        ex = GIS.UnrotatedExtent(ex);

        if ((ex.XMin < -360) &&
            (ex.XMax > 360) &&
            (ex.YMin < -180) &&
            (ex.YMax > 180)) return;

        ptg1 = new TGIS_Point(ex.XMin, ex.YMin);
        ptg2 = new TGIS_Point(ex.XMax, ex.YMin);
        ptg3 = new TGIS_Point(ex.XMax, ex.YMax);
        ptg4 = new TGIS_Point(ex.XMin, ex.YMax);

        if (minishp != null)
        {
            minishp.Reset();
            minishp.Lock(TGIS_Lock.Extent);
            minishp.AddPart();
            minishp.AddPoint(ptg1);
            minishp.AddPoint(ptg2);
            minishp.AddPoint(ptg3);
            minishp.AddPoint(ptg4);
            minishp.Unlock();
        }

        if (minishpo != null)
        {
            minishpo.Reset();
            minishpo.Lock(TGIS_Lock.Extent);
            minishpo.AddPart();
            minishpo.AddPoint(ptg1);
            minishpo.AddPoint(ptg2);
            minishpo.AddPoint(ptg3);
            minishpo.AddPoint(ptg4);
            minishpo.AddPoint(ptg1);
            minishpo.Unlock();
        }
        GISm.InvalidateWholeMap();
    }
    
    //own rounding function
    private double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value *= factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }   
    
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniMapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniMapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniMapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniMapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniMapUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private tatukgis.jdk.TGIS_ViewerWnd GIS;
    private tatukgis.jdk.TGIS_ViewerWnd GISm;
    private javax.swing.JButton btnDrag;
    private javax.swing.JButton btnFullExtent;
    private javax.swing.JButton btnZoom;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblCoords;
    private javax.swing.JLabel lblP1;
    private javax.swing.JLabel lblP2;
    private javax.swing.JLabel lblP3;
    private javax.swing.JLabel lblP4;
    // End of variables declaration//GEN-END:variables
    private String MINIMAP_R_NAME = "minimap_rect";
    private String MINIMAP_O_NAME = "minimap_rect_outline";
    private TGIS_Shape minishp;                             //minimap shape
    private TGIS_Shape minishpo;                            //minimap shape outline
    private Boolean fminiMove;                              //flag for move mini rectangle
    private TGIS_Point lP1, lP2, lP3, lP4;
}
