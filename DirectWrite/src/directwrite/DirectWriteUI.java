package directwrite;

import java.awt.Toolkit;
import java.io.File;
import tatukgis.jdk.TGIS_Color;
import tatukgis.jdk.TGIS_DimensionType;
import tatukgis.jdk.TGIS_GeometryFactory;
import tatukgis.jdk.TGIS_LayerSHP;
import tatukgis.jdk.TGIS_LayerVector;
import tatukgis.jdk.TGIS_LayerVectorDirectWriteHelper;
import tatukgis.jdk.TGIS_LayerVectorEnumerator;
import tatukgis.jdk.TGIS_LayerVectorMergeHelper;
import tatukgis.jdk.TGIS_Shape;
import tatukgis.jdk.TGIS_ShapeType;
import tatukgis.jdk.TGIS_Utils;

public class DirectWriteUI extends javax.swing.JFrame {

    public DirectWriteUI() {
        initComponents();
        initOwn();
    }
    
    private void initOwn(){
        number = 0;
        exists = true;
        
        while(exists){
            file = new File("Shapes" + number);
            if(file.exists()) {
                number++;
            } else {
                exists = false;
            }
        }
        
        file.mkdirs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GIS = new tatukgis.jdk.TGIS_ViewerWnd();
        jToolBar1 = new javax.swing.JToolBar();
        btnBuildLayer = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnImportLayer = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnMergeLayer = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnDirectWrite = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnMergeHelper = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DirectWrite - TatukGIS DK11 sample");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/icon.png")));
            setSize(new java.awt.Dimension(800, 600));

            GIS.setMode(tatukgis.jdk.TGIS_ViewerMode.Zoom);

            jToolBar1.setRollover(true);

            btnBuildLayer.setText("Build layer");
            btnBuildLayer.setFocusable(false);
            btnBuildLayer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnBuildLayer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            btnBuildLayer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBuildLayerActionPerformed(evt);
                }
            });
            jToolBar1.add(btnBuildLayer);
            jToolBar1.add(jSeparator1);

            btnImportLayer.setText("Import layer");
            btnImportLayer.setEnabled(false);
            btnImportLayer.setFocusable(false);
            btnImportLayer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnImportLayer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            btnImportLayer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnImportLayerActionPerformed(evt);
                }
            });
            jToolBar1.add(btnImportLayer);
            jToolBar1.add(jSeparator2);

            btnMergeLayer.setText("Merge layer");
            btnMergeLayer.setEnabled(false);
            btnMergeLayer.setFocusable(false);
            btnMergeLayer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnMergeLayer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            btnMergeLayer.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnMergeLayerActionPerformed(evt);
                }
            });
            jToolBar1.add(btnMergeLayer);
            jToolBar1.add(jSeparator3);

            btnDirectWrite.setText("Direct write");
            btnDirectWrite.setEnabled(false);
            btnDirectWrite.setFocusable(false);
            btnDirectWrite.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnDirectWrite.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            btnDirectWrite.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDirectWriteActionPerformed(evt);
                }
            });
            jToolBar1.add(btnDirectWrite);
            jToolBar1.add(jSeparator4);

            btnMergeHelper.setText("Merge helper");
            btnMergeHelper.setEnabled(false);
            btnMergeHelper.setFocusable(false);
            btnMergeHelper.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnMergeHelper.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            btnMergeHelper.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnMergeHelperActionPerformed(evt);
                }
            });
            jToolBar1.add(btnMergeHelper);
            jToolBar1.add(jSeparator5);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void btnBuildLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuildLayerActionPerformed
        TGIS_LayerSHP ll, lv;
        
        GIS.Close();
        
        btnImportLayer.setEnabled(true);

        
        if(file.exists()){
            number++;
            file = new File("Shapes" + number);
            file.mkdirs();
        }
        lv = new TGIS_LayerSHP();
        try{
            lv.Build(   "Shapes"+ number +"/build.shp", 
                        TGIS_Utils.GisExtent(-180, -90, 180, 90),
                        TGIS_ShapeType.Point, 
                        TGIS_DimensionType.XY
                    );
            lv.Open();

            ll = new TGIS_LayerSHP();
            ll.setPath(TGIS_Utils.GisSamplesDataDirDownload()+ "/World/WorldDCW/cities.shp");
            ll.Open();
            lv.ImportStructure(ll);
            lv.setCS(ll.getCS());

            for(Object shp : ll.Loop()){
                lv.AddShape((TGIS_Shape) shp, true);
            }

            lv.SaveData();
        }catch(Exception ex){
            
        }
        GIS.Add(lv);
        GIS.FullExtent();
        GIS.InvalidateWholeMap();
    }//GEN-LAST:event_btnBuildLayerActionPerformed

    private void btnImportLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportLayerActionPerformed
        TGIS_LayerSHP ll, lv;
        TGIS_Shape shp;
        
        GIS.Close();
        
        btnMergeLayer.setEnabled(true);
       
        ll = new TGIS_LayerSHP();
        ll.setPath(TGIS_Utils.GisSamplesDataDirDownload() + "/World/WorldDCW/cities.shp");
        GIS.Add(ll);
        
        shp = TGIS_GeometryFactory.GisCreateShapeFromWKT("POLYGON((7.86 56.39,31.37 56.39,31.37 39.48,7.86 39.48,7.868 56.39))");
        
        lv = new TGIS_LayerSHP();
        lv.setPath("Shapes"+ number +"/imported.shp");
        lv.setCS(ll.getCS());
        lv.ImportLayerEx(   ll, 
                            ll.getExtent(), 
                            TGIS_ShapeType.Unknown, 
                            "", 
                            shp, 
                            TGIS_Utils.GIS_RELATE_CONTAINS(), 
                            false
                        );
        GIS.Add(lv);
        lv.getParams().getMarker().setColor(TGIS_Color.getGreen());
        GIS.FullExtent();
        GIS.setVisibleExtent(lv.getExtent());
        GIS.InvalidateWholeMap();
    }//GEN-LAST:event_btnImportLayerActionPerformed

    private void btnMergeLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeLayerActionPerformed
        TGIS_LayerSHP ll, lv;
        TGIS_Shape shp;
        
        GIS.Close();
        
        btnDirectWrite.setEnabled(true);
       
        ll = new TGIS_LayerSHP();
        ll.setPath(TGIS_Utils.GisSamplesDataDirDownload() + "/World/WorldDCW/cities.shp");
        GIS.Add(ll);
        
        shp = TGIS_GeometryFactory.GisCreateShapeFromWKT("POLYGON((7.86 56.39,31.37 56.39,31.37 39.48,7.86 39.48,7.868 56.39))");
        
        lv = new TGIS_LayerSHP();
        lv.setPath("Shapes"+ number +"/imported.shp");
        lv.setCS(ll.getCS());
        lv.MergeLayerEx(ll, 
                        ll.getExtent(), 
                        TGIS_ShapeType.Unknown, 
                        "",
                        shp, 
                        TGIS_Utils.GIS_RELATE_DISJOINT(), 
                        false, 
                        false
                        );
        GIS.Add(lv);
        lv.getParams().getMarker().setColor(TGIS_Color.getGreen());
        GIS.FullExtent();
        GIS.setVisibleExtent(lv.getExtent());
        GIS.InvalidateWholeMap();
    }//GEN-LAST:event_btnMergeLayerActionPerformed

    private void btnDirectWriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectWriteActionPerformed
        TGIS_LayerSHP lv;
        TGIS_LayerVector ll ; 
        TGIS_LayerVectorDirectWriteHelper drh;
        
        GIS.Close();

        btnMergeHelper.setEnabled(true);
        
        ll = new TGIS_LayerSHP();
        ll.setPath(TGIS_Utils.GisSamplesDataDirDownload() + "/World/WorldDCW/cities.shp");
        ll.Open();
        
        lv = new TGIS_LayerSHP();
        lv.ImportStructure(ll);
        lv.setCS(ll.getCS());
        
        drh = new TGIS_LayerVectorDirectWriteHelper(lv);
        
        drh.Build(  "Shapes"+ number +"/direct_write.shp", 
                    ll.getExtent(), 
                    TGIS_ShapeType.Point, 
                    TGIS_DimensionType.XY
                 );
                 
        for(Object shp : ll.Loop()){
            drh.AddShape((TGIS_Shape) shp);
        }
        GIS.Add(lv);
        GIS.FullExtent();
    }//GEN-LAST:event_btnDirectWriteActionPerformed

    private void btnMergeHelperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeHelperActionPerformed
        TGIS_LayerSHP lv;
        TGIS_LayerVector ll ; 
        TGIS_Shape shp;
        TGIS_LayerVectorMergeHelper drm;
        TGIS_LayerVectorEnumerator en;
        
        GIS.Close();
        
        btnImportLayer.setEnabled(false);
        btnDirectWrite.setEnabled(false);
        btnMergeLayer.setEnabled(false);
        btnMergeHelper.setEnabled(false);
        
        ll = new TGIS_LayerSHP();
        ll.setPath(TGIS_Utils.GisSamplesDataDirDownload() + "/World/WorldDCW/cities.shp");
        ll.Open();
        
        lv = new TGIS_LayerSHP();
        try{
            lv.ImportStructure(ll);
            lv.setCS(ll.getCS());
            lv.Build(   "Shapes"+ number +"/merge_helper.shp", 
                        ll.getExtent(), 
                        TGIS_ShapeType.Point, 
                        TGIS_DimensionType.XY
                    );

            drm = new TGIS_LayerVectorMergeHelper(lv, 500);

            for(Object tmp : ll.Loop()){
                drm.AddShape((TGIS_Shape) tmp);
                drm.Commit();
            }
        }catch(Exception ex){
            
        }
        GIS.Add(lv);
        GIS.FullExtent();    }//GEN-LAST:event_btnMergeHelperActionPerformed

    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DirectWriteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DirectWriteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DirectWriteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DirectWriteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */ 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DirectWriteUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private tatukgis.jdk.TGIS_ViewerWnd GIS;
    private javax.swing.JButton btnBuildLayer;
    private javax.swing.JButton btnDirectWrite;
    private javax.swing.JButton btnImportLayer;
    private javax.swing.JButton btnMergeHelper;
    private javax.swing.JButton btnMergeLayer;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    private boolean exists;
    private int number;
    private File file; 
}
