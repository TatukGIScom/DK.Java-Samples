package snap;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import tatukgis.jdk.TGIS_BrushStyle;
import tatukgis.jdk.TGIS_LabelPosition;
import tatukgis.jdk.TGIS_LayerVector;
import tatukgis.jdk.TGIS_Lock;
import tatukgis.jdk.TGIS_Point;
import tatukgis.jdk.TGIS_Shape;
import tatukgis.jdk.TGIS_ShapeType;
import tatukgis.jdk.TGIS_Utils;

public class SnapUI extends javax.swing.JFrame {

    public SnapUI() {
        initComponents();
        initOwn();
    }
    
    private void initOwn(){
        TGIS_LayerVector ll;
        
        // lets open streets
        GIS.Lock();
        GIS.Open(TGIS_Utils.GisSamplesDataDirDownload() + "/World/Countries/USA/States/California/San Bernardino/TIGER/tl_2008_06071_edges_trunc.shp");
        GIS.setZoom(GIS.getZoom() * 5);
        GIS.CenterViewport(TGIS_Utils.GisPoint(-117.0208, 34.0629));
        
        // now create a points layer 
        ll = new TGIS_LayerVector();
        ll.setPath("trackingpoints");
        ll.setCS(GIS.getCS());
        GIS.Add(ll);
        GIS.Unlock();
        ll.getParams().getLabels().setAllocator(false);
        
        
        ll.getParams().getLabels().setAllocator(false);
        
        // and attach to it our test police-car point
        shpPolice = ll.CreateShape(TGIS_ShapeType.Point);
        shpPolice.getParams().getMarker().setSymbol(
            TGIS_Utils.getSymbolList().Prepare(TGIS_Utils.GisSamplesDataDirDownload() + "/Symbols/police.bmp?TRUE")
        );
        shpPolice.getParams().getMarker().setSize(-13);
        shpPolice.getParams().getLabels().setOutlineWidth(0);
        shpPolice.getParams().getLabels().setPattern(TGIS_BrushStyle.Clear);
        shpPolice.getParams().getLabels().setPosition(TGIS_LabelPosition.DownCenter);
        shpPolice.getParams().getLabels().setValue("112");    
        
        tmrWithSnapping_Tick = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                TGIS_Point ptg;
                
                ptg = new TGIS_Point();
                // let's move in some aribtrary direction
                // normally you can read here a GPS position etc.
                ptg.X = shpPolice.Centroid().X - 0.00020;
                ptg.Y = shpPolice.Centroid().Y + 0.00010;

                // move icon over the map
                // is not elegant to access Items[0] but its only sample :>
                shpPolice.Lock(TGIS_Lock.Projection);
                shpPolice.SetPosition(ptg, (TGIS_LayerVector)GIS.getItems().getItems(0), 0.05);
                shpPolice.Unlock();
                ++cntPoint;

                // end? - disable the timer
                if (cntPoint == 120)
                {
                    tmrWithSnapping.stop();
                    btnWithout.setEnabled(true);
                    btnWith.setEnabled(true);
                }  
            }
        };                
                
        tmrWithoutSnapping_Tick = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                TGIS_Point ptg;
                
                ptg = new TGIS_Point();
                // let's move in some aribtrary direction
                // normally you can read here a GPS position etc.
                ptg.X = shpPolice.Centroid().X - 0.00020;
                ptg.Y = shpPolice.Centroid().Y + 0.00010;

                // move icon over the map
                shpPolice.Lock(TGIS_Lock.Projection);
                shpPolice.SetPosition(ptg, null, 0);
                shpPolice.Unlock();
                ++cntPoint;

                // end? - disable the timer
                if (cntPoint == 120) 
                {
                    tmrWithoutSnapping.stop();
                    btnWithout.setEnabled(true);
                    btnWith.setEnabled(true);
                }  
            }
        };   
        
        tmrWithSnapping = new Timer(100, tmrWithSnapping_Tick);
        // to protect against circular calling
        tmrWithSnapping.setCoalesce(false);
        tmrWithoutSnapping = new Timer(100, tmrWithoutSnapping_Tick);
        // to protect against circular calling
        tmrWithoutSnapping.setCoalesce(false);
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnWith = new javax.swing.JButton();
        btnWithout = new javax.swing.JButton();
        GIS = new tatukgis.jdk.TGIS_ViewerWnd();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Snap - TatukGIS DK11 sample");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/icon.png")));

        btnWith.setText("Start with snapping");
        btnWith.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWithActionPerformed(evt);
            }
        });

        btnWithout.setText("Start without snapping");
        btnWithout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWithoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnWith)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnWithout)
                        .addGap(0, 400, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWith)
                    .addComponent(btnWithout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnWithActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWithActionPerformed
        btnWithout.setEnabled(false);
        btnWith.setEnabled(false);

        // Let's travel from Left-dwon to Upper-right
        shpPolice.SetPosition(GIS.getCenter(), null, 0);

        cntPoint = 0;
        tmrWithSnapping.start();
    }//GEN-LAST:event_btnWithActionPerformed

    private void btnWithoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWithoutActionPerformed
        btnWithout.setEnabled(false);
        btnWith.setEnabled(false);

        // Let's travel from center of the screen
        shpPolice.SetPosition(GIS.getCenter(), null, 0);

        cntPoint = 0;
        tmrWithoutSnapping.start();
    }//GEN-LAST:event_btnWithoutActionPerformed
    
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnapUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnapUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private tatukgis.jdk.TGIS_ViewerWnd GIS;
    private javax.swing.JButton btnWith;
    private javax.swing.JButton btnWithout;
    // End of variables declaration//GEN-END:variables
    private TGIS_Shape shpPolice;
    private int cntPoint; 
    private Timer tmrWithoutSnapping;
    private Timer tmrWithSnapping;
    private ActionListener tmrWithoutSnapping_Tick;
    private ActionListener tmrWithSnapping_Tick;
}
