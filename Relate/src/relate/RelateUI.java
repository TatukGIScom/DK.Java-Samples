package relate;

import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import tatukgis.jdk.TGIS_Color;
import tatukgis.jdk.TGIS_LabelPosition;
import tatukgis.jdk.TGIS_LayerVector;
import tatukgis.jdk.TGIS_Point;
import tatukgis.jdk.TGIS_Shape;
import tatukgis.jdk.TGIS_Utils;
import static tatukgis.jdk.__Global.RELATE_CONTAINS;
import static tatukgis.jdk.__Global.RELATE_CROSS;
import static tatukgis.jdk.__Global.RELATE_CROSS_LINE;
import static tatukgis.jdk.__Global.RELATE_DISJOINT;
import static tatukgis.jdk.__Global.RELATE_EQUALITY;
import static tatukgis.jdk.__Global.RELATE_INTERSECT;
import static tatukgis.jdk.__Global.RELATE_INTERSECT1;
import static tatukgis.jdk.__Global.RELATE_INTERSECT2;
import static tatukgis.jdk.__Global.RELATE_INTERSECT3;
import static tatukgis.jdk.__Global.RELATE_OVERLAP;
import static tatukgis.jdk.__Global.RELATE_OVERLAP_LINE;
import static tatukgis.jdk.__Global.RELATE_TOUCH;
import static tatukgis.jdk.__Global.RELATE_TOUCH_INTERIOR;
import static tatukgis.jdk.__Global.RELATE_WITHIN;
import tatukgis.rtl.TPoint;

public class RelateUI extends javax.swing.JFrame {

    public RelateUI() {
        initComponents();
        initOwn();
    }
    
    private void initOwn(){
        int i;
        TGIS_LayerVector ll;
        GIS.Open(TGIS_Utils.GisSamplesDataDirDownload() + "/Samples/Topology/topology2.shp");

        for(i = 0; i < GIS.getItems().getCount() - 1; i++){
            ll = (TGIS_LayerVector)GIS.getItems().getItems(i);
            ll.getParamsList().Add();
            ll.getParams().setStyle("selected");
            ll.getParams().getArea().setOutlineWidth(1);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCheck = new javax.swing.JButton();
        relationTextArea = new javax.swing.JTextArea();
        GIS = new tatukgis.jdk.TGIS_ViewerWnd();
        shapeA = new javax.swing.JTextArea();
        shapeB = new javax.swing.JTextArea();
        shapeASelected = new javax.swing.JTextArea();
        shapeBSelected = new javax.swing.JTextArea();
        info = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relate - TatukGIS DK11 sample");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/icon.png")));
        setMinimumSize(new java.awt.Dimension(800, 600));

        btnCheck.setText("check relation");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        relationTextArea.setEditable(false);
        relationTextArea.setBackground(new java.awt.Color(240, 240, 240));
        relationTextArea.setColumns(20);
        relationTextArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        relationTextArea.setRows(5);

        GIS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GISMousePressed(evt);
            }
        });

        shapeA.setEditable(false);
        shapeA.setBackground(new java.awt.Color(240, 240, 240));
        shapeA.setColumns(20);
        shapeA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        shapeA.setRows(5);
        shapeA.setText("Shape A:");

        shapeB.setEditable(false);
        shapeB.setBackground(new java.awt.Color(240, 240, 240));
        shapeB.setColumns(20);
        shapeB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        shapeB.setRows(5);
        shapeB.setText("Shape B:");

        shapeASelected.setEditable(false);
        shapeASelected.setBackground(new java.awt.Color(240, 240, 240));
        shapeASelected.setColumns(20);
        shapeASelected.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        shapeASelected.setForeground(new java.awt.Color(0, 0, 255));
        shapeASelected.setRows(5);
        shapeASelected.setText("UnSelected");

        shapeBSelected.setEditable(false);
        shapeBSelected.setBackground(new java.awt.Color(240, 240, 240));
        shapeBSelected.setColumns(20);
        shapeBSelected.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        shapeBSelected.setForeground(new java.awt.Color(255, 0, 0));
        shapeBSelected.setRows(5);
        shapeBSelected.setText("UnSelected");

        info.setEditable(false);
        info.setBackground(new java.awt.Color(240, 240, 240));
        info.setColumns(20);
        info.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        info.setRows(5);
        info.setText("click left mouse button\nto select shape A and \nright one to select\nshape B");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnCheck)
                            .addGap(43, 43, 43))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(info, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(relationTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(shapeB, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(shapeBSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(shapeA, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(shapeASelected, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shapeA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shapeASelected, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shapeB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shapeBSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(relationTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 159, Short.MAX_VALUE))
            .addComponent(GIS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GISMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GISMousePressed
        TGIS_Point ptg;
        TGIS_Shape shp;
        
        if(GIS.getIsEmpty()) return;
        
        ptg = GIS.ScreenToMap(new TPoint(evt.getX(), evt.getY()));
        shp = (TGIS_Shape)GIS.Locate(ptg, 5/GIS.getZoom());
        
        if(shp == null) return;
        
        shp = shp.MakeEditable();
        
        if(evt.getButton() == MouseEvent.BUTTON1){ //left mouse button click
            if(shpA != null){
                shpA.getParams().getArea().setColor(TGIS_Color.getGray());
                shpA.getParams().getLabels().setValue("");
                shpA.Invalidate();
                shapeASelected.setText("UnSelected");
            }
            
            shpA = shp;
            shpA.getParams().getArea().setColor(TGIS_Color.getBlue());
            shpA.getParams().getLabels().setValue("Shape A");
            shpA.getParams().getLabels().setPosition(TGIS_LabelPosition.UpLeft);
            shpA.Invalidate();
            shapeASelected.setText("Selected");
        }
        
        if(evt.getButton() == MouseEvent.BUTTON3){ //right mouse button click
            if(shpB != null){
                shpB.getParams().getArea().setColor(TGIS_Color.getGray());
                shpB.getParams().getLabels().setValue("");
                shpB.Invalidate();
                shapeBSelected.setText("UnSelected");
            }
            
            shpB = shp;
            shpB.getParams().getArea().setColor(TGIS_Color.getRed());
            shpB.getParams().getLabels().setValue("Shape B");
            shpB.getParams().getLabels().setPosition(TGIS_LabelPosition.UpLeft);
            shpB.Invalidate();
            shapeBSelected.setText("Selected");
        }
    }//GEN-LAST:event_GISMousePressed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        relations = "";
        
        if((shpA == null) || (shpB == null)) return;
        
        if(shpA.Relate(shpB, RELATE_EQUALITY)) relations += "EQUALITY\n";
        if(shpA.Relate(shpB, RELATE_DISJOINT)) relations += "DISJOINT\n";
        if(shpA.Relate(shpB, RELATE_INTERSECT+"")) relations += "INTERSECT\n"; //incompatible with char, converting to string by concat
        if(shpA.Relate(shpB, RELATE_INTERSECT1)) relations += "INTERSECT1\n";
        if(shpA.Relate(shpB, RELATE_INTERSECT2)) relations += "INTERSECT2\n";
        if(shpA.Relate(shpB, RELATE_INTERSECT3)) relations += "INTERSECT3\n";
        if(shpA.Relate(shpB, RELATE_WITHIN)) relations += "WITHIN\n";
        if(shpA.Relate(shpB, RELATE_CROSS)) relations += "CROSS\n";
        if(shpA.Relate(shpB, RELATE_CROSS_LINE+"")) relations += "CROSS_LINE\n"; //incompatible with char, converting to string by concat
        if(shpA.Relate(shpB, RELATE_TOUCH)) relations += "TOUCH\n";
        if(shpA.Relate(shpB, RELATE_TOUCH_INTERIOR)) relations += "TOUCH_INTERIOR\n";
        if(shpA.Relate(shpB, RELATE_CONTAINS)) relations += "CONTAINS\n";
        if(shpA.Relate(shpB, RELATE_OVERLAP)) relations += "OVERLAP\n";
        if(shpA.Relate(shpB, RELATE_OVERLAP_LINE)) relations += "OVERLAP_LINE\n";
        
        relationTextArea.setText(relations);
    }//GEN-LAST:event_btnCheckActionPerformed

    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelateUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelateUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private tatukgis.jdk.TGIS_ViewerWnd GIS;
    private javax.swing.JButton btnCheck;
    private javax.swing.JTextArea info;
    private javax.swing.JTextArea relationTextArea;
    private javax.swing.JTextArea shapeA;
    private javax.swing.JTextArea shapeASelected;
    private javax.swing.JTextArea shapeB;
    private javax.swing.JTextArea shapeBSelected;
    // End of variables declaration//GEN-END:variables
    private TGIS_Shape shpA, shpB;
    private String relations;
}
